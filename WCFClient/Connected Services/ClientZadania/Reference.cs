//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ClientZadania {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Zadanie", Namespace="http://schemas.datacontract.org/2004/07/DemoService")]
    [System.SerializableAttribute()]
    public partial class Zadanie : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TerminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TytulField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Termin {
            get {
                return this.TerminField;
            }
            set {
                if ((this.TerminField.Equals(value) != true)) {
                    this.TerminField = value;
                    this.RaisePropertyChanged("Termin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tytul {
            get {
                return this.TytulField;
            }
            set {
                if ((object.ReferenceEquals(this.TytulField, value) != true)) {
                    this.TytulField = value;
                    this.RaisePropertyChanged("Tytul");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientZadania.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Hello", ReplyAction="http://tempuri.org/ITaskService/HelloResponse")]
        string Hello(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Hello", ReplyAction="http://tempuri.org/ITaskService/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/NoweZadanie", ReplyAction="http://tempuri.org/ITaskService/NoweZadanieResponse")]
        int NoweZadanie(WCFClient.ClientZadania.Zadanie zadanie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/NoweZadanie", ReplyAction="http://tempuri.org/ITaskService/NoweZadanieResponse")]
        System.Threading.Tasks.Task<int> NoweZadanieAsync(WCFClient.ClientZadania.Zadanie zadanie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetZadanie", ReplyAction="http://tempuri.org/ITaskService/GetZadanieResponse")]
        WCFClient.ClientZadania.Zadanie GetZadanie(int idZadania);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetZadanie", ReplyAction="http://tempuri.org/ITaskService/GetZadanieResponse")]
        System.Threading.Tasks.Task<WCFClient.ClientZadania.Zadanie> GetZadanieAsync(int idZadania);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : WCFClient.ClientZadania.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<WCFClient.ClientZadania.ITaskService>, WCFClient.ClientZadania.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Hello(string name) {
            return base.Channel.Hello(name);
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync(string name) {
            return base.Channel.HelloAsync(name);
        }
        
        public int NoweZadanie(WCFClient.ClientZadania.Zadanie zadanie) {
            return base.Channel.NoweZadanie(zadanie);
        }
        
        public System.Threading.Tasks.Task<int> NoweZadanieAsync(WCFClient.ClientZadania.Zadanie zadanie) {
            return base.Channel.NoweZadanieAsync(zadanie);
        }
        
        public WCFClient.ClientZadania.Zadanie GetZadanie(int idZadania) {
            return base.Channel.GetZadanie(idZadania);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ClientZadania.Zadanie> GetZadanieAsync(int idZadania) {
            return base.Channel.GetZadanieAsync(idZadania);
        }
    }
}
